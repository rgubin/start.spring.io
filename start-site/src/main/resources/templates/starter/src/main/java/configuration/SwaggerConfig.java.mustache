package {{packageName}}.configuration;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.AuthorizationScope;
import springfox.documentation.service.GrantType;
import springfox.documentation.service.ImplicitGrant;
import springfox.documentation.service.LoginEndpoint;
import springfox.documentation.service.OAuth;
import springfox.documentation.service.SecurityReference;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spi.service.contexts.SecurityContext;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.Collections;
import java.util.List;

import static springfox.documentation.builders.PathSelectors.regex;

@Configuration
@EnableSwagger2
public class SwaggerConfig {

    public static final String securitySchemaOAuth2 = "OAuth2Implicit";
    public static final String authorizationScopeGlobal = "api";
    public static final String authorizationScopeGlobalDesc = "API Authorization Scope";

    @Value("${swagger.api.name:This is Java API Starter Kit server documentation}")
    private String apiName;
    @Value("${swagger.api.description:Java API Starter Kit}")
    private String apiDescription;
    @Value("${swagger.api.entry.point:/rest/.*}")
    private String apiEntryPoint;
    @Value("${oauth2.login.entry.point:https://www-dev.realpage.com/login/identity/connect/authorize}")
    private String loginEntryPoint;

    @Bean
    public Docket profileApi() {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                .paths(regex(apiEntryPoint.contains(".*") ? apiEntryPoint : apiEntryPoint + ".*"))
                .build()
                .securitySchemes(Collections.singletonList(securitySchema()))
                .securityContexts(Collections.singletonList(securityContext()));

    }

    private OAuth securitySchema() {
        List<AuthorizationScope> authorizationScopeList = Collections.singletonList(new AuthorizationScope(authorizationScopeGlobal, authorizationScopeGlobalDesc));
        LoginEndpoint loginEndpoint = new LoginEndpoint(loginEntryPoint);
        GrantType grantType = new ImplicitGrant(loginEndpoint, "access_token");
        List<GrantType> grantTypes = Collections.singletonList(grantType);
        return new OAuth(securitySchemaOAuth2, authorizationScopeList, grantTypes);
    }

    private SecurityContext securityContext() {
        return SecurityContext.builder()
                .securityReferences(defaultAuth())
                .build();
    }

    private List<SecurityReference> defaultAuth() {
        List<AuthorizationScope> authorizationScope = Collections.singletonList(new AuthorizationScope(authorizationScopeGlobal, authorizationScopeGlobalDesc));
        AuthorizationScope[] authorizationScopes = new AuthorizationScope[1];
        authorizationScopes[0] = authorizationScope.get(0);
        return Collections.singletonList(new SecurityReference(securitySchemaOAuth2, authorizationScopes));
    }

    private ApiInfo apiInfo() {
        return new ApiInfoBuilder()
                .title(apiName)
                .description(apiDescription)
                .version("1.0")
                .build();
    }
}
