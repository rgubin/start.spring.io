package {{packageName}}.api.controller;

import {{packageName}}.api.controller.dto.CompanyCreateRequestDto;
import {{packageName}}.api.controller.dto.CompanyDto;
import {{packageName}}.api.controller.dto.CompanyResultDto;
import {{packageName}}.api.controller.dto.CompanyUpdateRequestDto;
import {{packageName}}.api.service.CompanyService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.UUID;

import static {{packageName}}.configuration.ApplicationConfig.API_VERSION_1;

@Slf4j
@RestController
@RequestMapping(value = API_VERSION_1 + "companies")
@Api(tags = "CompaniesController",
        description = "Java SpringBoot Kick Starter API - companies controller")
public class CompaniesControllerV1 {

    private final CompanyService companyService;

    @Autowired
    public CompaniesControllerV1(@Qualifier("companyServiceV1") CompanyService companyService) {
        this.companyService = companyService;
    }

    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(
            value = "Get Companies",
            notes = "Gets a list of all companies.",
            response = CompanyResultDto.class)
    @ApiResponses({
            @ApiResponse(code = 200, message = "Companies retrieved successfully")
    })
    @Secured("ROLE_OAUTH2")
    public CompanyResultDto getCompanies() {
        return new CompanyResultDto(companyService.getCompanyList());
    }

    @GetMapping(
            value = "{id}",
            produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(
            value = "Get Company",
            notes = "Get Company by id.",
            response = CompanyDto.class)
    @ApiResponses({
            @ApiResponse(code = 200, message = "Company retrieved successfully")
    })
    @Secured("ROLE_OAUTH2")
    public CompanyDto getCompany(@ApiParam(required = true) @PathVariable UUID id) {
        return companyService.getCompany(id);
    }

    @PostMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(
            value = "Create company",
            notes = "Create new company.",
            response = CompanyDto.class)
    @ApiResponses({
            @ApiResponse(code = 201, message = "Company created successfully")
    })
    @Secured("ROLE_OAUTH2")
    public CompanyDto createCompany(@ApiParam @RequestBody CompanyCreateRequestDto companyDto) {
        return companyService.createCompany(companyDto);
    }

    @PutMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(
            value = "Update company",
            notes = "Update existing company.",
            response = CompanyDto.class)
    @ApiResponses({
            @ApiResponse(code = 200, message = "Company updated successfully")
    })
    @Secured("ROLE_OAUTH2")
    public CompanyDto updateCompany(@ApiParam(required = true) @RequestBody CompanyUpdateRequestDto companyDto) {
        return companyService.updateCompany(companyDto);
    }

    @DeleteMapping(
            value = "{id}",
            produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(
            value = "Delete company",
            notes = "Delete existing company.",
            response = CompanyDto.class)
    @ApiResponses({
            @ApiResponse(code = 200, message = "Company deleted successfully")
    })
    @Secured("ROLE_OAUTH2")
    public void deleteCompany(@ApiParam(required = true) @PathVariable UUID id) {
        companyService.deleteCompany(id);
    }
}
