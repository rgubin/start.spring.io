package {{packageName}}.controller.external;

import {{packageName}}.configuration.SwaggerConfig;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import io.swagger.annotations.AuthorizationScope;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@Slf4j
@RestController
@RequestMapping(
        value = "/rest/v0/public/echo")
@Api(
        value = "/rest/v0/public/echo",
        description = "Java SpringBoot Kick Starter API - echo resource")
public class EchoResource {

    @GetMapping(
            produces = MediaType.TEXT_PLAIN_VALUE)
    @ApiOperation(
            value = "Echo",
            notes = "Just prints back \"ok\"",
            response = String.class)
    @ApiResponses({
            @ApiResponse(code = 200, message = "Request success"),
            @ApiResponse(code = 500, message = "Server error")
    })
    public ResponseEntity<String> getEcho() {
        log.debug("Got into the getEcho()");
        return new ResponseEntity<>("ok", HttpStatus.OK);
    }

    @PutMapping(
            produces = MediaType.TEXT_PLAIN_VALUE)
    @ApiOperation(
            value = "Echo",
            authorizations = {
                    @Authorization(value = SwaggerConfig.securitySchemaOAuth2,
                            scopes = {
                                    @AuthorizationScope(
                                            scope = SwaggerConfig.authorizationScopeGlobal,
                                            description = SwaggerConfig.authorizationScopeGlobalDesc)
                            }
                    )
            },
            notes = "Print back request string",
            response = String.class)
    @ApiResponses({
            @ApiResponse(code = 200, message = "Request success"),
            @ApiResponse(code = 500, message = "Server error")
    })
    @Secured("ROLE_OAUTH2")
    public ResponseEntity<String> putEcho(@ApiParam @RequestBody String payload) {
        log.debug("Got into the putEcho()");
        return new ResponseEntity<>(payload, HttpStatus.OK);
    }
}
