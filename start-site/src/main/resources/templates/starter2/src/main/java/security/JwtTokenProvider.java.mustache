package {{packageName}}.security;

import com.auth0.jwt.JWT;
import com.auth0.jwt.exceptions.JWTDecodeException;
import com.auth0.jwt.interfaces.DecodedJWT;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;
import org.springframework.stereotype.Component;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;

import static {{packageName}}.configuration.SecurityConfig.OAUTH2_AUTHORITY;

/**
 * Customise this provider to implement token validation and principal authority assignments
 *
 */
@Component
public class JwtTokenProvider {

    public static final String HEADER_AUTHORIZATION = "Authorization";
    public static final String TOKEN_PREFIX = "Bearer ";

    public Authentication getAuthentication(String token) {
        DecodedJWT jwt = JWT.decode(token);
        Collection<GrantedAuthority> authorities = convertAuthorities(jwt);
        authorities.add(new SimpleGrantedAuthority(OAUTH2_AUTHORITY));
        Object principal = jwt.getClaim("personaId").asString();
        return new PreAuthenticatedAuthenticationToken(principal, null, authorities);
    }

    public String resolveToken(HttpServletRequest req) {
        String bearerToken = req.getHeader(HEADER_AUTHORIZATION);
        if (bearerToken != null && bearerToken.startsWith(TOKEN_PREFIX)) {
            return bearerToken.substring(7);
        }
        return null;
    }

    public boolean validateToken(String token) {
        try {
            DecodedJWT jwt = JWT.decode(token);
            if (jwt.getExpiresAt().after(new Date())) {
                return true;
            }
        } catch (JWTDecodeException exception) {
            return false;
        }
        return false;
    }

    public Collection<GrantedAuthority> convertAuthorities(DecodedJWT source) {
        Collection<GrantedAuthority> grantedAuthorities = new ArrayList<>();
        for (String authority : getAuthorities(source)) {
            grantedAuthorities.add(new SimpleGrantedAuthority(authority));
        }
        return grantedAuthorities;
    }

    private Collection<String> getAuthorities(DecodedJWT source) {
        Object authorities = source.getClaim("auth");
        if (authorities instanceof Collection) {
            return (Collection<String>) authorities;
        }
        return Collections.emptyList();
    }
}
